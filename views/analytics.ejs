<html>
    <head>
        <style>
            body{
                background: rgb(248, 251, 255);
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            }

            .center{
                position: fixed;
                top: 100px;
                left: 50%;
                transform: translate(-50%, 0);
                text-align: center;
                height: 50%;
                width: 25%;
            }

            .box{
                box-shadow: rgba(0, 0, 0, 0.123) 0px 0px 25px;
                border-radius: 5px;
                background: rgb(255, 255, 255);
                margin: 10px;
            }

            .avatar{
                width: 100px;
                height: 100px;
                border-radius: 50%;
                background: rgb(0, 162, 255);
                display: inline-flex;
                margin: 10px;
                vertical-align: middle;
                align-items: center;
                color: rgb(0, 162, 255);
            }

            .input{
                margin: 10px;
                padding: 10px;
                outline: none;
                width: calc(100% - 100px);
                border: rgb(212, 212, 212) 2px solid;
                border-radius: 5px;
                transition: 0.25s;
            }

            .input:hover{
                border: rgb(105, 105, 105) 2px solid;
            }

            .input:focus{
                box-shadow: #0005 0 0 5px;
            }

            .button{
                margin: 10px;
                padding: 10px;
                outline: none;
                width: calc(100% - 125px);
                border: rgb(0, 162, 255) 2px solid;
                border-radius: 5px;
                transition: 0.25s;
                background: rgb(0, 162, 255);
                cursor: pointer;
                user-select: none;
                display: inline-block;
                color: white;
            }

            .button:hover{
                box-shadow: #0005 0 0 5px;
            }

            #errText{
                color: red;
            }

            .navBar{
                width: calc(100% - 20px);
                position: fixed;
                top: 0;
                left: 0;
                height: 38px;
            }

            .nav{
                display: inline-block;
                padding: 10px;
                transition: 0.25s;
                cursor: pointer;
                user-select: none;
                border-radius: 5px;
            }
            
            .nav:hover{
                background: rgb(196, 196, 196);
            }

            .sidebar{
                position: fixed;
                top: 58px;
                left: 0;
                height: calc(100% - 78px); 
                width: 250px;
            }

            .main{
                position: fixed;
                top: 58px;
                left: 270px;
                width: calc(100% - 270px);
                height: calc(100% - 68px);
                overflow: auto;
                text-align: center;
            }

            .line-blue{ stroke: #137ffa; }
            .line-green{ stroke: #0cc151; }
            .line-red{ stroke: #c10c0c; }
            .line-yellow{ stroke: #f3ef0b; }
            .line-orange{ stroke: #f3960b; }
            .line-purple{ stroke: #bd0bf3; }
            .line-pink{ stroke: #f30bc1; }
            .line-deepblue{ stroke: #0400ff; }
            .line-skyblue{ stroke: #00e1ff; }
            .line-greenblue{ stroke: #00ffd5; }

            .row{
                display: flex;
            }

            th{
                background: rgb(224, 224, 224);
                padding: 5px 15px;
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                border-radius: 1px;
            }

            td{
                padding: 5px 15px;
                background: rgb(217, 230, 255);
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                border-radius: 1px;
            }

            th:first-child{
                border-radius: 5px 1px 1px 1px;
            }

            th:last-child{
                border-radius: 1px 5px 1px 1px;
            }
        </style>
        <link rel="stylesheet" href="/assets/chartist.min.css">
    </head>
    <body>
        <div class="box navBar">
            <div class="nav">Main</div>
            <div class="nav" onclick="window.location = '/account'">Account</div>
        </div>

        <div class="box sidebar">
            <div class="nav" onclick="window.location = '/panel'" style="width: calc(100% - 20px);">Home</div><br />
            <div class="nav" onclick="window.location = '/panel/records'" style="width: calc(100% - 20px);">Records</div><br />
            <div class="nav" onclick="window.location = '/panel/apps'" style="width: calc(100% - 20px);">Applications</div><br />
            <div class="nav" onclick="window.location = '/panel/logs'" style="width: calc(100% - 20px);">Logs</div><br />
            <div class="nav" onclick="window.location = '/panel/static'" style="width: calc(100% - 20px);">Static</div><br />
            <div class="nav" onclick="window.location = '/panel/admin'" style="width: calc(100% - 20px);">Administration</div><br />
        </div>

        <div class="main">
            <div class="row">
                <div class="box" style="width: 100%; text-align: center;">
                    <h2>Analytics For <%= record.host %></h2>
                </div>
            </div>

            <div class="row">
                <div class="box" style="width: 100%;">
                    <h2>Requests In The Past 24 Hours</h2>

                    <div class="ct-chart" style="height: 200px;"></div>
                </div>
            </div>

            <div class="row">
                <div style="width: 75%;">
                    <div class="box" style="width: calc(100% - 20px); height: 350px; display: flex;">
                        <div style="width: 50%;">
                            <h2>Web Browsers</h2>
                            <div class="browsers-chart" style="height: 75%;"></div>
                        </div>
                        <div style="width: 50%;">
                            <h2>Operating Systems</h2>
                            <div class="os-chart" style="height: 75%;"></div>
                        </div>
                    </div>

                    <div class="box scrollToBottom" style="margin-top: 20px; height: 130px; width: calc(100% - 20px); overflow: auto;">
                        <% requests.forEach(page => { %>
                            <span><%= page.ip %> Requested: <%= page.method %> <%= page.host %><%= page.url %></span><br />
                        <% }) %>
                    </div>
                </div>
                <div style="width: 25%; height: 500px;">
                    <div class="box" style="height: 240px; margin-bottom: 20px;">
                        <br /><br /><span>Average Load Time</span>
                        <%
                            let respTime = 0
                            pages.forEach(p => {
                                respTime += parseInt(p.loadTime)
                            })

                            respTime = (respTime / pages.length).toFixed(2);
                        %>
                        <h1><%= respTime %>ms</h1>

                        <div class="button" onclick="fetch('/api/v1/analytics', { method: 'DELETE' })">Reset Analytics</div>
                    </div>
                    <div class="box" style="height: 240px;">
                        <br /><br /><span>Bot Requests</span>
                        <h1><%= requests.length - pages.length %><span style="font-size: 15px;">/<%= security.length %></span></h1>

                        <div class="button" onclick="fetch('/api/v1/security', { method: 'DELETE' })">Reset Security</div>
                    </div>
                </div>
            </div>
        </div>

        <script src="/assets/chartist.min.js"></script>
        <%
            let hours24 = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
            let currentDate = Date.now();
            let labels = [];

            requests.forEach(r => {
                let d = new Date(r.time);

                if(r.time > currentDate - (24 * 3600000)){
                    hours24[Math.floor((currentDate - r.time) / 3600000)]++
                }
            })

            for(let i = 0; i < 24; i++){
                let time = new Date(currentDate - (i * 3600000));
                labels.push(time.getHours() + ':' + time.getMinutes());
            }

            hours24.reverse();
            labels.reverse();

            let getOS = ( userAgent ) => {
                if(userAgent.includes('windows')){
                    return 'Windows'
                } else if(userAgent.includes('android')){
                    return 'Android'
                } else if(userAgent.includes('ios')){
                    return 'IOS'
                } else if(userAgent.includes('linux')){
                    return 'Linux'
                } else {
                    return null
                }
            }

            let getBrowser = ( userAgent ) => {
                if(userAgent.includes('firefox')){
                    return 'Mozilla Firefox'
                } else if(userAgent.includes('chrome')){
                    return 'Google Chrome'
                } else if(userAgent.includes('safari')){
                    return 'Safari'
                } else if(userAgent.includes('opera')){
                    return 'Opera'
                } else if(userAgent.includes('msie')){
                    return 'Internet Explorer'
                } else {
                    return null
                }
            }

            let browsers = [];
            let data = [];
            let oss = [];
            let osdata = [];

            let reks = requests.filter(x => x.time > currentDate - 86400000);
            reks.forEach(req => {
                if(req.headers['user-agent']){
                    let ua = getBrowser(req.headers['user-agent'].toLowerCase())
                    if(ua){
                        let index = browsers.indexOf(ua)
                    
                        if(index !== -1){
                            data[index]++;
                        } else{
                            browsers.push(ua);
                            data.push(1);
                        }
                    }
                    

                    let ua1 = getOS(req.headers['user-agent'].toLowerCase())
                    if(ua1){
                        let index1 = oss.indexOf(ua1)
                    
                        if(index1 !== -1){
                            osdata[index1]++;
                        } else{
                            oss.push(ua1);
                            osdata.push(1);
                        }
                    }
                }
            })
        %>
        <script>
            let c = new Chartist.Line('.ct-chart', {
                labels: <%- JSON.stringify(labels) %>,
                series: [
                    { value: <%- JSON.stringify(hours24) %>, className: 'line-blue' }
                ]
            }, {
                low: 0,
                showArea: true
            });

            new Chartist.Pie('.browsers-chart', {
                labels: <%- JSON.stringify(browsers) %>,
                series: <%- JSON.stringify(data) %>,
            }, {
                donut: true,
                donutWidth: 30,
                donutSolid: true,
                startAngle: 270,
                chartPadding: 30,
                labelOffset: 25,
                labelDirection: 'explode'
            });

            new Chartist.Pie('.os-chart', {
                labels: <%- JSON.stringify(oss) %>,
                series: <%- JSON.stringify(osdata) %>,
            }, {
                donut: true,
                donutWidth: 30,
                donutSolid: true,
                startAngle: 270,
                chartPadding: 30,
                labelOffset: 25,
                labelDirection: 'explode'
            });

            let scrols = document.querySelectorAll('.scrollToBottom');
            scrols.forEach(el => el.scrollBy(0, el.scrollHeight));
        </script>
    </body>
</html>